name: Django Application CICD

on:
  push:
    branches:
      - main
    paths:
      - 'ApplicationCode/Services/Django-app/shopping_cart/*'
  workflow_dispatch:


env:
  AZURE_CONTAINER_REGISTRY: "myorgprodacr"
  NAMESPACE: "django-app"
  CLUSTER_NAME: "myorg-prod-aks"
  CONTAINER_NAME: "djangoapp"
  RESOURCE_GROUP: "test"
  IMAGE_PULL_SECRET_NAME: "djangoapp-pull-secret"


jobs:
  createSecret:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    # Logs in with your Azure credentials
    - name: AZ Login
      run: az login --service-principal -u 0f5f80d8-e9b7-40ff-94ea-ec1bdc0b8da2 -p QVK8Q~JNwhus08RkmUeTvShyGPNUxPdoHwAkBctv --tenant ab834a0e-d914-4111-9d90-210d9c0c5212

    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v2.0
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    
    - name: Create namespace if it does not exist
      run: |
          set -e
          if ! kubectl get namespace ${{ env.NAMESPACE }}; then
            kubectl create namespace ${{ env.NAMESPACE }}
          fi

    # Retrieves the credentials for pulling images from your Azure Container Registry
    - name: Get ACR credentials
      run: |
        az acr update -n ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} --admin-enabled true
        ACR_USERNAME=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query username -o tsv)
        ACR_PASSWORD=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query passwords[0].value -o tsv)
        echo "::add-mask::${ACR_USERNAME}"
        echo "::set-output name=username::${ACR_USERNAME}"
        echo "::add-mask::${ACR_PASSWORD}"
        echo "::set-output name=password::${ACR_PASSWORD}"
      id: get-acr-creds

    # Creates a kubernetes secret on your Azure Kubernetes Service cluster that matches up to the credentials from the last step
    - name: Create K8s secret for pulling image from ACR
      uses: Azure/k8s-create-secret@v1.1
      with:
        namespace: ${{ env.NAMESPACE }}
        container-registry-url: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        container-registry-username: ${{ steps.get-acr-creds.outputs.username }}
        container-registry-password: ${{ steps.get-acr-creds.outputs.password }}
        secret-name: ${{ env.IMAGE_PULL_SECRET_NAME }} 

  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: AZ Login
      run: az login --service-principal -u 0f5f80d8-e9b7-40ff-94ea-ec1bdc0b8da2 -p QVK8Q~JNwhus08RkmUeTvShyGPNUxPdoHwAkBctv --tenant ab834a0e-d914-4111-9d90-210d9c0c5212

    - name: Build Docker image
      run: |
        az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} .
      working-directory: 'ApplicationCode/Services/Django-app/shopping_cart'
    
    - name: Get K8s context
      uses: azure/aks-set-context@v2.0
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}
    

    - uses: Azure/k8s-deploy@v4
      with:
         action: deploy
         namespace: ${{ env.NAMESPACE }}
         manifests: |
            Kubernetes/manifests/djangoapp
         images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} 
         imagepullsecrets: |
          ${{ env.IMAGE_PULL_SECRET_NAME }}