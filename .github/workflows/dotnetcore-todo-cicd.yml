
# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
# 
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these 
#    https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux)):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#
# 3. Choose the appropriate render engine for the bake step https://github.com/Azure/k8s-bake. The config below assumes Helm.
#    Set your helmChart, overrideFiles, overrides, and helm-version to suit your configuration.
#    - CHART_PATH (path to your helm chart)
#    - CHART_OVERRIDE_PATH (path to your helm chart with override values)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy an app to AKS with Helm

on:
  push:
    branches: [ "main" ]
    paths: 
    - 'ApplicationCode/Services/DotNetCore-todo-app/*'

  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: "myorgprodacr"
  NAMESPACE: "dotnet-todo-app"
  CONTAINER_NAME: "dotnettodoapp"
  RESOURCE_GROUP: "test"
  CLUSTER_NAME: "myorg-prod-aks"
  IMAGE_PULL_SECRET_NAME: "dotnettodoapp-pull-secrete"
  CHART_PATH: "Kubernetes/helm/dotnetcore-todo-app"
  CHART_OVERRIDE_PATH: "Kubernetes/helm/dotnetcore-todo-app/values-dotnetToDoApp.yaml"

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    # Checks out the repository this file is in
    - uses: actions/checkout@v3
    
    # Logs in with your Azure credentials
    - name: AZ Login
      run: az login --service-principal -u 0f5f80d8-e9b7-40ff-94ea-ec1bdc0b8da2 -p QVK8Q~JNwhus08RkmUeTvShyGPNUxPdoHwAkBctv --tenant ab834a0e-d914-4111-9d90-210d9c0c5212

    # Builds and pushes an image up to your Azure Container Registry
    - name: Build and push image to ACR
      run: |
        az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} .
      working-directory: ApplicationCode/Services/DotNetCore-todo-app

  createSecret:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    # Logs in with your Azure credentials
    - name: AZ Login
      run: az login --service-principal -u 0f5f80d8-e9b7-40ff-94ea-ec1bdc0b8da2 -p QVK8Q~JNwhus08RkmUeTvShyGPNUxPdoHwAkBctv --tenant ab834a0e-d914-4111-9d90-210d9c0c5212

    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v2.0
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}
    
    - name: Create namespace if it does not exist
      run: |
            set -e
            if ! kubectl get namespace ${{ env.NAMESPACE }}; then
              kubectl create namespace ${{ env.NAMESPACE }}
            fi

    # Retrieves the credentials for pulling images from your Azure Container Registry
    - name: Get ACR credentials
      run: |
        az acr update -n ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} --admin-enabled true
        ACR_USERNAME=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query username -o tsv)
        ACR_PASSWORD=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query passwords[0].value -o tsv)
        echo "::add-mask::${ACR_USERNAME}"
        echo "::set-output name=username::${ACR_USERNAME}"
        echo "::add-mask::${ACR_PASSWORD}"
        echo "::set-output name=password::${ACR_PASSWORD}"
      id: get-acr-creds

    # Creates a kubernetes secret on your Azure Kubernetes Service cluster that matches up to the credentials from the last step
    - name: Create K8s secret for pulling image from ACR
      uses: Azure/k8s-create-secret@v1.1
      with:
        namespace: ${{ env.NAMESPACE }}
        container-registry-url: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        container-registry-username: ${{ steps.get-acr-creds.outputs.username }}
        container-registry-password: ${{ steps.get-acr-creds.outputs.password }}
        secret-name: ${{ env.IMAGE_PULL_SECRET_NAME }} 

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage, createSecret]
    steps:
    # Checks out the repository this file is in
    - uses: actions/checkout@v3
    
    # Logs in with your Azure credentials
    - name: AZ Login
      run: az login --service-principal -u 0f5f80d8-e9b7-40ff-94ea-ec1bdc0b8da2 -p QVK8Q~JNwhus08RkmUeTvShyGPNUxPdoHwAkBctv --tenant ab834a0e-d914-4111-9d90-210d9c0c5212

    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v2.0
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    # Runs Helm to create manifest files
    - name: Bake deployment
      uses: azure/k8s-bake@v2.1
      with:
        renderEngine: 'helm'
        helmChart: ${{ env.CHART_PATH }}
        overrideFiles: ${{ env.CHART_OVERRIDE_PATH }}
        overrides: |     
          replicas:2
          appsettings=${{ secrets.APPSETTINGS }}
        helm-version: 'latest' 
      id: bake

    # Deploys application based on manifest files from previous step
    - name: Deploy application
      uses: Azure/k8s-deploy@v3.1
      with:
        action: deploy
        namespace:   ${{ env.NAMESPACE }} 
        manifests: ${{ steps.bake.outputs.manifestsBundle }}
        images: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.IMAGE_PULL_SECRET_NAME }}
